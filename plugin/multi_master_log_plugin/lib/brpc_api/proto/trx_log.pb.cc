// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trx_log.proto

#include "trx_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_trx_5flog_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_trx_5flog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BenchLogMsg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_trx_5flog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrxLogMsg;
}  // namespace protobuf_trx_5flog_2eproto
namespace MMLP_BRPC {
class BenchLogMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BenchLogMsg>
      _instance;
} _BenchLogMsg_default_instance_;
class TrxLogMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrxLogMsg>
      _instance;
} _TrxLogMsg_default_instance_;
class LogSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogSendRequest>
      _instance;
} _LogSendRequest_default_instance_;
class LogSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogSendResponse>
      _instance;
} _LogSendResponse_default_instance_;
class LogRequireRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogRequireRequest>
      _instance;
} _LogRequireRequest_default_instance_;
class LogRequireResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogRequireResponse>
      _instance;
} _LogRequireResponse_default_instance_;
}  // namespace MMLP_BRPC
namespace protobuf_trx_5flog_2eproto {
static void InitDefaultsBenchLogMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_BenchLogMsg_default_instance_;
    new (ptr) ::MMLP_BRPC::BenchLogMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::BenchLogMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BenchLogMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBenchLogMsg}, {}};

static void InitDefaultsTrxLogMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_TrxLogMsg_default_instance_;
    new (ptr) ::MMLP_BRPC::TrxLogMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::TrxLogMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrxLogMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrxLogMsg}, {
      &protobuf_trx_5flog_2eproto::scc_info_BenchLogMsg.base,}};

static void InitDefaultsLogSendRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogSendRequest_default_instance_;
    new (ptr) ::MMLP_BRPC::LogSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogSendRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogSendRequest}, {
      &protobuf_trx_5flog_2eproto::scc_info_TrxLogMsg.base,}};

static void InitDefaultsLogSendResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogSendResponse_default_instance_;
    new (ptr) ::MMLP_BRPC::LogSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogSendResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogSendResponse}, {}};

static void InitDefaultsLogRequireRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogRequireRequest_default_instance_;
    new (ptr) ::MMLP_BRPC::LogRequireRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogRequireRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogRequireRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogRequireRequest}, {}};

static void InitDefaultsLogRequireResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogRequireResponse_default_instance_;
    new (ptr) ::MMLP_BRPC::LogRequireResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogRequireResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogRequireResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogRequireResponse}, {
      &protobuf_trx_5flog_2eproto::scc_info_TrxLogMsg.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BenchLogMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrxLogMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogSendRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogSendResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogRequireRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogRequireResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::BenchLogMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::BenchLogMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::BenchLogMsg, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::BenchLogMsg, row_no_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, page_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, rec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, benchmsg_),
  1,
  2,
  3,
  4,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, trxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, log_msg_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, send_reply_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, trxid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, require_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, log_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, trxid_),
  0,
  1,
  ~0u,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::MMLP_BRPC::BenchLogMsg)},
  { 9, 20, sizeof(::MMLP_BRPC::TrxLogMsg)},
  { 26, 34, sizeof(::MMLP_BRPC::LogSendRequest)},
  { 37, 43, sizeof(::MMLP_BRPC::LogSendResponse)},
  { 44, 50, sizeof(::MMLP_BRPC::LogRequireRequest)},
  { 51, 60, sizeof(::MMLP_BRPC::LogRequireResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_BenchLogMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_TrxLogMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_LogSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_LogSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_LogRequireRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MMLP_BRPC::_LogRequireResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "trx_log.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rtrx_log.proto\022\tMMLP_BRPC\".\n\013BenchLogMs"
      "g\022\017\n\007page_no\030\001 \002(\r\022\016\n\006row_no\030\002 \002(\r\"\203\001\n\tT"
      "rxLogMsg\022\014\n\004type\030\001 \002(\021\022\020\n\010space_id\030\002 \002(\r"
      "\022\017\n\007page_no\030\003 \002(\r\022\016\n\006offset\030\004 \002(\r\022\013\n\003rec"
      "\030\005 \002(\014\022(\n\010benchmsg\030\006 \003(\0132\026.MMLP_BRPC.Ben"
      "chLogMsg\"X\n\016LogSendRequest\022\r\n\005trxID\030\001 \002("
      "\004\022\020\n\010is_valid\030\002 \002(\010\022%\n\007log_msg\030\003 \003(\0132\024.M"
      "MLP_BRPC.TrxLogMsg\"%\n\017LogSendResponse\022\022\n"
      "\nsend_reply\030\001 \002(\021\"\"\n\021LogRequireRequest\022\r"
      "\n\005trxID\030\001 \002(\004\"s\n\022LogRequireResponse\022\025\n\rr"
      "equire_reply\030\001 \002(\021\022\020\n\010is_valid\030\002 \002(\010\022%\n\007"
      "log_msg\030\003 \003(\0132\024.MMLP_BRPC.TrxLogMsg\022\r\n\005t"
      "rxID\030\004 \001(\0042\234\001\n\rTrxLogService\022@\n\007sendLog\022"
      "\031.MMLP_BRPC.LogSendRequest\032\032.MMLP_BRPC.L"
      "ogSendResponse\022I\n\nrequireLog\022\034.MMLP_BRPC"
      ".LogRequireRequest\032\035.MMLP_BRPC.LogRequir"
      "eResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trx_log.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_trx_5flog_2eproto
namespace MMLP_BRPC {

// ===================================================================

void BenchLogMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BenchLogMsg::kPageNoFieldNumber;
const int BenchLogMsg::kRowNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BenchLogMsg::BenchLogMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_BenchLogMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.BenchLogMsg)
}
BenchLogMsg::BenchLogMsg(const BenchLogMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_no_, &from.page_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_no_) -
    reinterpret_cast<char*>(&page_no_)) + sizeof(row_no_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.BenchLogMsg)
}

void BenchLogMsg::SharedCtor() {
  ::memset(&page_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_no_) -
      reinterpret_cast<char*>(&page_no_)) + sizeof(row_no_));
}

BenchLogMsg::~BenchLogMsg() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.BenchLogMsg)
  SharedDtor();
}

void BenchLogMsg::SharedDtor() {
}

void BenchLogMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BenchLogMsg::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BenchLogMsg& BenchLogMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_BenchLogMsg.base);
  return *internal_default_instance();
}


void BenchLogMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.BenchLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&page_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_no_) -
        reinterpret_cast<char*>(&page_no_)) + sizeof(row_no_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BenchLogMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.BenchLogMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_page_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 row_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_row_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.BenchLogMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.BenchLogMsg)
  return false;
#undef DO_
}

void BenchLogMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.BenchLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page_no = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_no(), output);
  }

  // required uint32 row_no = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->row_no(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.BenchLogMsg)
}

::google::protobuf::uint8* BenchLogMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.BenchLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page_no = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_no(), target);
  }

  // required uint32 row_no = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->row_no(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.BenchLogMsg)
  return target;
}

size_t BenchLogMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.BenchLogMsg)
  size_t total_size = 0;

  if (has_page_no()) {
    // required uint32 page_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_no());
  }

  if (has_row_no()) {
    // required uint32 row_no = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->row_no());
  }

  return total_size;
}
size_t BenchLogMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.BenchLogMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 page_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_no());

    // required uint32 row_no = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->row_no());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BenchLogMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.BenchLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BenchLogMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BenchLogMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.BenchLogMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.BenchLogMsg)
    MergeFrom(*source);
  }
}

void BenchLogMsg::MergeFrom(const BenchLogMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.BenchLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      page_no_ = from.page_no_;
    }
    if (cached_has_bits & 0x00000002u) {
      row_no_ = from.row_no_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BenchLogMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.BenchLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchLogMsg::CopyFrom(const BenchLogMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.BenchLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchLogMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BenchLogMsg::Swap(BenchLogMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BenchLogMsg::InternalSwap(BenchLogMsg* other) {
  using std::swap;
  swap(page_no_, other->page_no_);
  swap(row_no_, other->row_no_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BenchLogMsg::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrxLogMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrxLogMsg::kTypeFieldNumber;
const int TrxLogMsg::kSpaceIdFieldNumber;
const int TrxLogMsg::kPageNoFieldNumber;
const int TrxLogMsg::kOffsetFieldNumber;
const int TrxLogMsg::kRecFieldNumber;
const int TrxLogMsg::kBenchmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrxLogMsg::TrxLogMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_TrxLogMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.TrxLogMsg)
}
TrxLogMsg::TrxLogMsg(const TrxLogMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      benchmsg_(from.benchmsg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rec()) {
    rec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rec_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.TrxLogMsg)
}

void TrxLogMsg::SharedCtor() {
  rec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
}

TrxLogMsg::~TrxLogMsg() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.TrxLogMsg)
  SharedDtor();
}

void TrxLogMsg::SharedDtor() {
  rec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrxLogMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrxLogMsg::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrxLogMsg& TrxLogMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_TrxLogMsg.base);
  return *internal_default_instance();
}


void TrxLogMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.TrxLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benchmsg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rec_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrxLogMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.TrxLogMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 space_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_space_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 page_no = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_page_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes rec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_benchmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.TrxLogMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.TrxLogMsg)
  return false;
#undef DO_
}

void TrxLogMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.TrxLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // required uint32 space_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->space_id(), output);
  }

  // required uint32 page_no = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_no(), output);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // required bytes rec = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rec(), output);
  }

  // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->benchmsg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->benchmsg(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.TrxLogMsg)
}

::google::protobuf::uint8* TrxLogMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.TrxLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // required uint32 space_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->space_id(), target);
  }

  // required uint32 page_no = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_no(), target);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // required bytes rec = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rec(), target);
  }

  // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->benchmsg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->benchmsg(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.TrxLogMsg)
  return target;
}

size_t TrxLogMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.TrxLogMsg)
  size_t total_size = 0;

  if (has_rec()) {
    // required bytes rec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rec());
  }

  if (has_type()) {
    // required sint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  if (has_space_id()) {
    // required uint32 space_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  if (has_page_no()) {
    // required uint32 page_no = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_no());
  }

  if (has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  return total_size;
}
size_t TrxLogMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.TrxLogMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes rec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rec());

    // required sint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->type());

    // required uint32 space_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());

    // required uint32 page_no = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_no());

    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->benchmsg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->benchmsg(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrxLogMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.TrxLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TrxLogMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrxLogMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.TrxLogMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.TrxLogMsg)
    MergeFrom(*source);
  }
}

void TrxLogMsg::MergeFrom(const TrxLogMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.TrxLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  benchmsg_.MergeFrom(from.benchmsg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rec();
      rec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rec_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      space_id_ = from.space_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      page_no_ = from.page_no_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrxLogMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.TrxLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrxLogMsg::CopyFrom(const TrxLogMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.TrxLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrxLogMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->benchmsg())) return false;
  return true;
}

void TrxLogMsg::Swap(TrxLogMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrxLogMsg::InternalSwap(TrxLogMsg* other) {
  using std::swap;
  CastToBase(&benchmsg_)->InternalSwap(CastToBase(&other->benchmsg_));
  rec_.Swap(&other->rec_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(space_id_, other->space_id_);
  swap(page_no_, other->page_no_);
  swap(offset_, other->offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrxLogMsg::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogSendRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSendRequest::kTrxIDFieldNumber;
const int LogSendRequest::kIsValidFieldNumber;
const int LogSendRequest::kLogMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSendRequest::LogSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_LogSendRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.LogSendRequest)
}
LogSendRequest::LogSendRequest(const LogSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      log_msg_(from.log_msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trxid_, &from.trxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogSendRequest)
}

void LogSendRequest::SharedCtor() {
  ::memset(&trxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
}

LogSendRequest::~LogSendRequest() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogSendRequest)
  SharedDtor();
}

void LogSendRequest::SharedDtor() {
}

void LogSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogSendRequest::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogSendRequest& LogSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_LogSendRequest.base);
  return *internal_default_instance();
}


void LogSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&trxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_) -
        reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.LogSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trxID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_log_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.LogSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.LogSendRequest)
  return false;
#undef DO_
}

void LogSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.LogSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trxid(), output);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_valid(), output);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->log_msg(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.LogSendRequest)
}

::google::protobuf::uint8* LogSendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trxid(), target);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_valid(), target);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->log_msg(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogSendRequest)
  return target;
}

size_t LogSendRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.LogSendRequest)
  size_t total_size = 0;

  if (has_trxid()) {
    // required uint64 trxID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trxid());
  }

  if (has_is_valid()) {
    // required bool is_valid = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LogSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 trxID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trxid());

    // required bool is_valid = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->log_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log_msg(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogSendRequest)
    MergeFrom(*source);
  }
}

void LogSendRequest::MergeFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_msg_.MergeFrom(from.log_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      trxid_ = from.trxid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_valid_ = from.is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendRequest::CopyFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->log_msg())) return false;
  return true;
}

void LogSendRequest::Swap(LogSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSendRequest::InternalSwap(LogSendRequest* other) {
  using std::swap;
  CastToBase(&log_msg_)->InternalSwap(CastToBase(&other->log_msg_));
  swap(trxid_, other->trxid_);
  swap(is_valid_, other->is_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogSendRequest::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogSendResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSendResponse::kSendReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSendResponse::LogSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_LogSendResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.LogSendResponse)
}
LogSendResponse::LogSendResponse(const LogSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_reply_ = from.send_reply_;
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogSendResponse)
}

void LogSendResponse::SharedCtor() {
  send_reply_ = 0;
}

LogSendResponse::~LogSendResponse() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogSendResponse)
  SharedDtor();
}

void LogSendResponse::SharedDtor() {
}

void LogSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogSendResponse::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogSendResponse& LogSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_LogSendResponse.base);
  return *internal_default_instance();
}


void LogSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_reply_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.LogSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 send_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_send_reply();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &send_reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.LogSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.LogSendResponse)
  return false;
#undef DO_
}

void LogSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.LogSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 send_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->send_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.LogSendResponse)
}

::google::protobuf::uint8* LogSendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 send_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->send_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogSendResponse)
  return target;
}

size_t LogSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sint32 send_reply = 1;
  if (has_send_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->send_reply());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogSendResponse)
    MergeFrom(*source);
  }
}

void LogSendResponse::MergeFrom(const LogSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_send_reply()) {
    set_send_reply(from.send_reply());
  }
}

void LogSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendResponse::CopyFrom(const LogSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogSendResponse::Swap(LogSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSendResponse::InternalSwap(LogSendResponse* other) {
  using std::swap;
  swap(send_reply_, other->send_reply_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogSendResponse::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogRequireRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRequireRequest::kTrxIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRequireRequest::LogRequireRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_LogRequireRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.LogRequireRequest)
}
LogRequireRequest::LogRequireRequest(const LogRequireRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trxid_ = from.trxid_;
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogRequireRequest)
}

void LogRequireRequest::SharedCtor() {
  trxid_ = GOOGLE_ULONGLONG(0);
}

LogRequireRequest::~LogRequireRequest() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogRequireRequest)
  SharedDtor();
}

void LogRequireRequest::SharedDtor() {
}

void LogRequireRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogRequireRequest::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogRequireRequest& LogRequireRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_LogRequireRequest.base);
  return *internal_default_instance();
}


void LogRequireRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogRequireRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trxid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRequireRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.LogRequireRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trxID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.LogRequireRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.LogRequireRequest)
  return false;
#undef DO_
}

void LogRequireRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.LogRequireRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.LogRequireRequest)
}

::google::protobuf::uint8* LogRequireRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogRequireRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogRequireRequest)
  return target;
}

size_t LogRequireRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogRequireRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 trxID = 1;
  if (has_trxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trxid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRequireRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogRequireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequireRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRequireRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogRequireRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogRequireRequest)
    MergeFrom(*source);
  }
}

void LogRequireRequest::MergeFrom(const LogRequireRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogRequireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trxid()) {
    set_trxid(from.trxid());
  }
}

void LogRequireRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogRequireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequireRequest::CopyFrom(const LogRequireRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogRequireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequireRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogRequireRequest::Swap(LogRequireRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRequireRequest::InternalSwap(LogRequireRequest* other) {
  using std::swap;
  swap(trxid_, other->trxid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogRequireRequest::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogRequireResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRequireResponse::kRequireReplyFieldNumber;
const int LogRequireResponse::kIsValidFieldNumber;
const int LogRequireResponse::kLogMsgFieldNumber;
const int LogRequireResponse::kTrxIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRequireResponse::LogRequireResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_trx_5flog_2eproto::scc_info_LogRequireResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MMLP_BRPC.LogRequireResponse)
}
LogRequireResponse::LogRequireResponse(const LogRequireResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      log_msg_(from.log_msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&require_reply_, &from.require_reply_,
    static_cast<size_t>(reinterpret_cast<char*>(&trxid_) -
    reinterpret_cast<char*>(&require_reply_)) + sizeof(trxid_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogRequireResponse)
}

void LogRequireResponse::SharedCtor() {
  ::memset(&require_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trxid_) -
      reinterpret_cast<char*>(&require_reply_)) + sizeof(trxid_));
}

LogRequireResponse::~LogRequireResponse() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogRequireResponse)
  SharedDtor();
}

void LogRequireResponse::SharedDtor() {
}

void LogRequireResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogRequireResponse::descriptor() {
  ::protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogRequireResponse& LogRequireResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_trx_5flog_2eproto::scc_info_LogRequireResponse.base);
  return *internal_default_instance();
}


void LogRequireResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogRequireResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&require_reply_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trxid_) -
        reinterpret_cast<char*>(&require_reply_)) + sizeof(trxid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRequireResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MMLP_BRPC.LogRequireResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 require_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_require_reply();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &require_reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_log_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 trxID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MMLP_BRPC.LogRequireResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MMLP_BRPC.LogRequireResponse)
  return false;
#undef DO_
}

void LogRequireResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MMLP_BRPC.LogRequireResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 require_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->require_reply(), output);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_valid(), output);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->log_msg(static_cast<int>(i)),
      output);
  }

  // optional uint64 trxID = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->trxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MMLP_BRPC.LogRequireResponse)
}

::google::protobuf::uint8* LogRequireResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogRequireResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 require_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->require_reply(), target);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_valid(), target);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->log_msg(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 trxID = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->trxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogRequireResponse)
  return target;
}

size_t LogRequireResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.LogRequireResponse)
  size_t total_size = 0;

  if (has_require_reply()) {
    // required sint32 require_reply = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->require_reply());
  }

  if (has_is_valid()) {
    // required bool is_valid = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LogRequireResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogRequireResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sint32 require_reply = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->require_reply());

    // required bool is_valid = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->log_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log_msg(static_cast<int>(i)));
    }
  }

  // optional uint64 trxID = 4;
  if (has_trxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trxid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRequireResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogRequireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequireResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRequireResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogRequireResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogRequireResponse)
    MergeFrom(*source);
  }
}

void LogRequireResponse::MergeFrom(const LogRequireResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogRequireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_msg_.MergeFrom(from.log_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      require_reply_ = from.require_reply_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_valid_ = from.is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trxid_ = from.trxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogRequireResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogRequireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequireResponse::CopyFrom(const LogRequireResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogRequireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequireResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->log_msg())) return false;
  return true;
}

void LogRequireResponse::Swap(LogRequireResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRequireResponse::InternalSwap(LogRequireResponse* other) {
  using std::swap;
  CastToBase(&log_msg_)->InternalSwap(CastToBase(&other->log_msg_));
  swap(require_reply_, other->require_reply_);
  swap(is_valid_, other->is_valid_);
  swap(trxid_, other->trxid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogRequireResponse::GetMetadata() const {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trx_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TrxLogService::~TrxLogService() {}

const ::google::protobuf::ServiceDescriptor* TrxLogService::descriptor() {
  protobuf_trx_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trx_5flog_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* TrxLogService::GetDescriptor() {
  return descriptor();
}

void TrxLogService::sendLog(::google::protobuf::RpcController* controller,
                         const ::MMLP_BRPC::LogSendRequest*,
                         ::MMLP_BRPC::LogSendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sendLog() not implemented.");
  done->Run();
}

void TrxLogService::requireLog(::google::protobuf::RpcController* controller,
                         const ::MMLP_BRPC::LogRequireRequest*,
                         ::MMLP_BRPC::LogRequireResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method requireLog() not implemented.");
  done->Run();
}

void TrxLogService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_trx_5flog_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      sendLog(controller,
             ::google::protobuf::down_cast<const ::MMLP_BRPC::LogSendRequest*>(request),
             ::google::protobuf::down_cast< ::MMLP_BRPC::LogSendResponse*>(response),
             done);
      break;
    case 1:
      requireLog(controller,
             ::google::protobuf::down_cast<const ::MMLP_BRPC::LogRequireRequest*>(request),
             ::google::protobuf::down_cast< ::MMLP_BRPC::LogRequireResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TrxLogService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MMLP_BRPC::LogSendRequest::default_instance();
    case 1:
      return ::MMLP_BRPC::LogRequireRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TrxLogService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MMLP_BRPC::LogSendResponse::default_instance();
    case 1:
      return ::MMLP_BRPC::LogRequireResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TrxLogService_Stub::TrxLogService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TrxLogService_Stub::TrxLogService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TrxLogService_Stub::~TrxLogService_Stub() {
  if (owns_channel_) delete channel_;
}

void TrxLogService_Stub::sendLog(::google::protobuf::RpcController* controller,
                              const ::MMLP_BRPC::LogSendRequest* request,
                              ::MMLP_BRPC::LogSendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TrxLogService_Stub::requireLog(::google::protobuf::RpcController* controller,
                              const ::MMLP_BRPC::LogRequireRequest* request,
                              ::MMLP_BRPC::LogRequireResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MMLP_BRPC
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::BenchLogMsg* Arena::CreateMaybeMessage< ::MMLP_BRPC::BenchLogMsg >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::BenchLogMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::TrxLogMsg* Arena::CreateMaybeMessage< ::MMLP_BRPC::TrxLogMsg >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::TrxLogMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::LogSendRequest* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::LogSendRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::LogSendResponse* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::LogSendResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::LogRequireRequest* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogRequireRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::LogRequireRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MMLP_BRPC::LogRequireResponse* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogRequireResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MMLP_BRPC::LogRequireResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
