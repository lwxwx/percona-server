// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trx_log.proto

#ifndef PROTOBUF_INCLUDED_trx_5flog_2eproto
#define PROTOBUF_INCLUDED_trx_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_trx_5flog_2eproto 

namespace protobuf_trx_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_trx_5flog_2eproto
namespace MMLP_BRPC {
class BenchLogMsg;
class BenchLogMsgDefaultTypeInternal;
extern BenchLogMsgDefaultTypeInternal _BenchLogMsg_default_instance_;
class LogRequireRequest;
class LogRequireRequestDefaultTypeInternal;
extern LogRequireRequestDefaultTypeInternal _LogRequireRequest_default_instance_;
class LogRequireResponse;
class LogRequireResponseDefaultTypeInternal;
extern LogRequireResponseDefaultTypeInternal _LogRequireResponse_default_instance_;
class LogSendRequest;
class LogSendRequestDefaultTypeInternal;
extern LogSendRequestDefaultTypeInternal _LogSendRequest_default_instance_;
class LogSendResponse;
class LogSendResponseDefaultTypeInternal;
extern LogSendResponseDefaultTypeInternal _LogSendResponse_default_instance_;
class TrxLogMsg;
class TrxLogMsgDefaultTypeInternal;
extern TrxLogMsgDefaultTypeInternal _TrxLogMsg_default_instance_;
}  // namespace MMLP_BRPC
namespace google {
namespace protobuf {
template<> ::MMLP_BRPC::BenchLogMsg* Arena::CreateMaybeMessage<::MMLP_BRPC::BenchLogMsg>(Arena*);
template<> ::MMLP_BRPC::LogRequireRequest* Arena::CreateMaybeMessage<::MMLP_BRPC::LogRequireRequest>(Arena*);
template<> ::MMLP_BRPC::LogRequireResponse* Arena::CreateMaybeMessage<::MMLP_BRPC::LogRequireResponse>(Arena*);
template<> ::MMLP_BRPC::LogSendRequest* Arena::CreateMaybeMessage<::MMLP_BRPC::LogSendRequest>(Arena*);
template<> ::MMLP_BRPC::LogSendResponse* Arena::CreateMaybeMessage<::MMLP_BRPC::LogSendResponse>(Arena*);
template<> ::MMLP_BRPC::TrxLogMsg* Arena::CreateMaybeMessage<::MMLP_BRPC::TrxLogMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MMLP_BRPC {

// ===================================================================

class BenchLogMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.BenchLogMsg) */ {
 public:
  BenchLogMsg();
  virtual ~BenchLogMsg();

  BenchLogMsg(const BenchLogMsg& from);

  inline BenchLogMsg& operator=(const BenchLogMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BenchLogMsg(BenchLogMsg&& from) noexcept
    : BenchLogMsg() {
    *this = ::std::move(from);
  }

  inline BenchLogMsg& operator=(BenchLogMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BenchLogMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BenchLogMsg* internal_default_instance() {
    return reinterpret_cast<const BenchLogMsg*>(
               &_BenchLogMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BenchLogMsg* other);
  friend void swap(BenchLogMsg& a, BenchLogMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BenchLogMsg* New() const final {
    return CreateMaybeMessage<BenchLogMsg>(NULL);
  }

  BenchLogMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BenchLogMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BenchLogMsg& from);
  void MergeFrom(const BenchLogMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchLogMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 page_no = 1;
  bool has_page_no() const;
  void clear_page_no();
  static const int kPageNoFieldNumber = 1;
  ::google::protobuf::uint32 page_no() const;
  void set_page_no(::google::protobuf::uint32 value);

  // required uint32 row_no = 2;
  bool has_row_no() const;
  void clear_row_no();
  static const int kRowNoFieldNumber = 2;
  ::google::protobuf::uint32 row_no() const;
  void set_row_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.BenchLogMsg)
 private:
  void set_has_page_no();
  void clear_has_page_no();
  void set_has_row_no();
  void clear_has_row_no();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 page_no_;
  ::google::protobuf::uint32 row_no_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrxLogMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.TrxLogMsg) */ {
 public:
  TrxLogMsg();
  virtual ~TrxLogMsg();

  TrxLogMsg(const TrxLogMsg& from);

  inline TrxLogMsg& operator=(const TrxLogMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrxLogMsg(TrxLogMsg&& from) noexcept
    : TrxLogMsg() {
    *this = ::std::move(from);
  }

  inline TrxLogMsg& operator=(TrxLogMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrxLogMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrxLogMsg* internal_default_instance() {
    return reinterpret_cast<const TrxLogMsg*>(
               &_TrxLogMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrxLogMsg* other);
  friend void swap(TrxLogMsg& a, TrxLogMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrxLogMsg* New() const final {
    return CreateMaybeMessage<TrxLogMsg>(NULL);
  }

  TrxLogMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrxLogMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrxLogMsg& from);
  void MergeFrom(const TrxLogMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrxLogMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
  int benchmsg_size() const;
  void clear_benchmsg();
  static const int kBenchmsgFieldNumber = 6;
  ::MMLP_BRPC::BenchLogMsg* mutable_benchmsg(int index);
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >*
      mutable_benchmsg();
  const ::MMLP_BRPC::BenchLogMsg& benchmsg(int index) const;
  ::MMLP_BRPC::BenchLogMsg* add_benchmsg();
  const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >&
      benchmsg() const;

  // required bytes rec = 5;
  bool has_rec() const;
  void clear_rec();
  static const int kRecFieldNumber = 5;
  const ::std::string& rec() const;
  void set_rec(const ::std::string& value);
  #if LANG_CXX11
  void set_rec(::std::string&& value);
  #endif
  void set_rec(const char* value);
  void set_rec(const void* value, size_t size);
  ::std::string* mutable_rec();
  ::std::string* release_rec();
  void set_allocated_rec(::std::string* rec);

  // required sint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required uint32 space_id = 2;
  bool has_space_id() const;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 2;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // required uint32 page_no = 3;
  bool has_page_no() const;
  void clear_page_no();
  static const int kPageNoFieldNumber = 3;
  ::google::protobuf::uint32 page_no() const;
  void set_page_no(::google::protobuf::uint32 value);

  // required uint32 offset = 4;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.TrxLogMsg)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_space_id();
  void clear_has_space_id();
  void set_has_page_no();
  void clear_has_page_no();
  void set_has_offset();
  void clear_has_offset();
  void set_has_rec();
  void clear_has_rec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg > benchmsg_;
  ::google::protobuf::internal::ArenaStringPtr rec_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 space_id_;
  ::google::protobuf::uint32 page_no_;
  ::google::protobuf::uint32 offset_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogSendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogSendRequest) */ {
 public:
  LogSendRequest();
  virtual ~LogSendRequest();

  LogSendRequest(const LogSendRequest& from);

  inline LogSendRequest& operator=(const LogSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogSendRequest(LogSendRequest&& from) noexcept
    : LogSendRequest() {
    *this = ::std::move(from);
  }

  inline LogSendRequest& operator=(LogSendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogSendRequest* internal_default_instance() {
    return reinterpret_cast<const LogSendRequest*>(
               &_LogSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LogSendRequest* other);
  friend void swap(LogSendRequest& a, LogSendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogSendRequest* New() const final {
    return CreateMaybeMessage<LogSendRequest>(NULL);
  }

  LogSendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogSendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogSendRequest& from);
  void MergeFrom(const LogSendRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  int log_msg_size() const;
  void clear_log_msg();
  static const int kLogMsgFieldNumber = 3;
  ::MMLP_BRPC::TrxLogMsg* mutable_log_msg(int index);
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
      mutable_log_msg();
  const ::MMLP_BRPC::TrxLogMsg& log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* add_log_msg();
  const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
      log_msg() const;

  // required uint64 trxID = 1;
  bool has_trxid() const;
  void clear_trxid();
  static const int kTrxIDFieldNumber = 1;
  ::google::protobuf::uint64 trxid() const;
  void set_trxid(::google::protobuf::uint64 value);

  // required bool is_valid = 2;
  bool has_is_valid() const;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 2;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogSendRequest)
 private:
  void set_has_trxid();
  void clear_has_trxid();
  void set_has_is_valid();
  void clear_has_is_valid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg > log_msg_;
  ::google::protobuf::uint64 trxid_;
  bool is_valid_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogSendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogSendResponse) */ {
 public:
  LogSendResponse();
  virtual ~LogSendResponse();

  LogSendResponse(const LogSendResponse& from);

  inline LogSendResponse& operator=(const LogSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogSendResponse(LogSendResponse&& from) noexcept
    : LogSendResponse() {
    *this = ::std::move(from);
  }

  inline LogSendResponse& operator=(LogSendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogSendResponse* internal_default_instance() {
    return reinterpret_cast<const LogSendResponse*>(
               &_LogSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LogSendResponse* other);
  friend void swap(LogSendResponse& a, LogSendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogSendResponse* New() const final {
    return CreateMaybeMessage<LogSendResponse>(NULL);
  }

  LogSendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogSendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogSendResponse& from);
  void MergeFrom(const LogSendResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 send_reply = 1;
  bool has_send_reply() const;
  void clear_send_reply();
  static const int kSendReplyFieldNumber = 1;
  ::google::protobuf::int32 send_reply() const;
  void set_send_reply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogSendResponse)
 private:
  void set_has_send_reply();
  void clear_has_send_reply();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 send_reply_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogRequireRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogRequireRequest) */ {
 public:
  LogRequireRequest();
  virtual ~LogRequireRequest();

  LogRequireRequest(const LogRequireRequest& from);

  inline LogRequireRequest& operator=(const LogRequireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRequireRequest(LogRequireRequest&& from) noexcept
    : LogRequireRequest() {
    *this = ::std::move(from);
  }

  inline LogRequireRequest& operator=(LogRequireRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRequireRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRequireRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequireRequest*>(
               &_LogRequireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LogRequireRequest* other);
  friend void swap(LogRequireRequest& a, LogRequireRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRequireRequest* New() const final {
    return CreateMaybeMessage<LogRequireRequest>(NULL);
  }

  LogRequireRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogRequireRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogRequireRequest& from);
  void MergeFrom(const LogRequireRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequireRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 trxID = 1;
  bool has_trxid() const;
  void clear_trxid();
  static const int kTrxIDFieldNumber = 1;
  ::google::protobuf::uint64 trxid() const;
  void set_trxid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogRequireRequest)
 private:
  void set_has_trxid();
  void clear_has_trxid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 trxid_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogRequireResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogRequireResponse) */ {
 public:
  LogRequireResponse();
  virtual ~LogRequireResponse();

  LogRequireResponse(const LogRequireResponse& from);

  inline LogRequireResponse& operator=(const LogRequireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRequireResponse(LogRequireResponse&& from) noexcept
    : LogRequireResponse() {
    *this = ::std::move(from);
  }

  inline LogRequireResponse& operator=(LogRequireResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRequireResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRequireResponse* internal_default_instance() {
    return reinterpret_cast<const LogRequireResponse*>(
               &_LogRequireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LogRequireResponse* other);
  friend void swap(LogRequireResponse& a, LogRequireResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRequireResponse* New() const final {
    return CreateMaybeMessage<LogRequireResponse>(NULL);
  }

  LogRequireResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogRequireResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogRequireResponse& from);
  void MergeFrom(const LogRequireResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequireResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  int log_msg_size() const;
  void clear_log_msg();
  static const int kLogMsgFieldNumber = 3;
  ::MMLP_BRPC::TrxLogMsg* mutable_log_msg(int index);
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
      mutable_log_msg();
  const ::MMLP_BRPC::TrxLogMsg& log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* add_log_msg();
  const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
      log_msg() const;

  // required sint32 require_reply = 1;
  bool has_require_reply() const;
  void clear_require_reply();
  static const int kRequireReplyFieldNumber = 1;
  ::google::protobuf::int32 require_reply() const;
  void set_require_reply(::google::protobuf::int32 value);

  // required bool is_valid = 2;
  bool has_is_valid() const;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 2;
  bool is_valid() const;
  void set_is_valid(bool value);

  // optional uint64 trxID = 4;
  bool has_trxid() const;
  void clear_trxid();
  static const int kTrxIDFieldNumber = 4;
  ::google::protobuf::uint64 trxid() const;
  void set_trxid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogRequireResponse)
 private:
  void set_has_require_reply();
  void clear_has_require_reply();
  void set_has_is_valid();
  void clear_has_is_valid();
  void set_has_trxid();
  void clear_has_trxid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg > log_msg_;
  ::google::protobuf::int32 require_reply_;
  bool is_valid_;
  ::google::protobuf::uint64 trxid_;
  friend struct ::protobuf_trx_5flog_2eproto::TableStruct;
};
// ===================================================================

class TrxLogService_Stub;

class TrxLogService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TrxLogService() {};
 public:
  virtual ~TrxLogService();

  typedef TrxLogService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void sendLog(::google::protobuf::RpcController* controller,
                       const ::MMLP_BRPC::LogSendRequest* request,
                       ::MMLP_BRPC::LogSendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void requireLog(::google::protobuf::RpcController* controller,
                       const ::MMLP_BRPC::LogRequireRequest* request,
                       ::MMLP_BRPC::LogRequireResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrxLogService);
};

class TrxLogService_Stub : public TrxLogService {
 public:
  TrxLogService_Stub(::google::protobuf::RpcChannel* channel);
  TrxLogService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TrxLogService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TrxLogService ------------------------------------------

  void sendLog(::google::protobuf::RpcController* controller,
                       const ::MMLP_BRPC::LogSendRequest* request,
                       ::MMLP_BRPC::LogSendResponse* response,
                       ::google::protobuf::Closure* done);
  void requireLog(::google::protobuf::RpcController* controller,
                       const ::MMLP_BRPC::LogRequireRequest* request,
                       ::MMLP_BRPC::LogRequireResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrxLogService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BenchLogMsg

// required uint32 page_no = 1;
inline bool BenchLogMsg::has_page_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BenchLogMsg::set_has_page_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BenchLogMsg::clear_has_page_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BenchLogMsg::clear_page_no() {
  page_no_ = 0u;
  clear_has_page_no();
}
inline ::google::protobuf::uint32 BenchLogMsg::page_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.BenchLogMsg.page_no)
  return page_no_;
}
inline void BenchLogMsg::set_page_no(::google::protobuf::uint32 value) {
  set_has_page_no();
  page_no_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.BenchLogMsg.page_no)
}

// required uint32 row_no = 2;
inline bool BenchLogMsg::has_row_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BenchLogMsg::set_has_row_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BenchLogMsg::clear_has_row_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BenchLogMsg::clear_row_no() {
  row_no_ = 0u;
  clear_has_row_no();
}
inline ::google::protobuf::uint32 BenchLogMsg::row_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.BenchLogMsg.row_no)
  return row_no_;
}
inline void BenchLogMsg::set_row_no(::google::protobuf::uint32 value) {
  set_has_row_no();
  row_no_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.BenchLogMsg.row_no)
}

// -------------------------------------------------------------------

// TrxLogMsg

// required sint32 type = 1;
inline bool TrxLogMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrxLogMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrxLogMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrxLogMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrxLogMsg::type() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.type)
  return type_;
}
inline void TrxLogMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.type)
}

// required uint32 space_id = 2;
inline bool TrxLogMsg::has_space_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrxLogMsg::set_has_space_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrxLogMsg::clear_has_space_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrxLogMsg::clear_space_id() {
  space_id_ = 0u;
  clear_has_space_id();
}
inline ::google::protobuf::uint32 TrxLogMsg::space_id() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.space_id)
  return space_id_;
}
inline void TrxLogMsg::set_space_id(::google::protobuf::uint32 value) {
  set_has_space_id();
  space_id_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.space_id)
}

// required uint32 page_no = 3;
inline bool TrxLogMsg::has_page_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrxLogMsg::set_has_page_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrxLogMsg::clear_has_page_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrxLogMsg::clear_page_no() {
  page_no_ = 0u;
  clear_has_page_no();
}
inline ::google::protobuf::uint32 TrxLogMsg::page_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.page_no)
  return page_no_;
}
inline void TrxLogMsg::set_page_no(::google::protobuf::uint32 value) {
  set_has_page_no();
  page_no_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.page_no)
}

// required uint32 offset = 4;
inline bool TrxLogMsg::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrxLogMsg::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrxLogMsg::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrxLogMsg::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TrxLogMsg::offset() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.offset)
  return offset_;
}
inline void TrxLogMsg::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.offset)
}

// required bytes rec = 5;
inline bool TrxLogMsg::has_rec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrxLogMsg::set_has_rec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrxLogMsg::clear_has_rec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrxLogMsg::clear_rec() {
  rec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rec();
}
inline const ::std::string& TrxLogMsg::rec() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.rec)
  return rec_.GetNoArena();
}
inline void TrxLogMsg::set_rec(const ::std::string& value) {
  set_has_rec();
  rec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.rec)
}
#if LANG_CXX11
inline void TrxLogMsg::set_rec(::std::string&& value) {
  set_has_rec();
  rec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMLP_BRPC.TrxLogMsg.rec)
}
#endif
inline void TrxLogMsg::set_rec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rec();
  rec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMLP_BRPC.TrxLogMsg.rec)
}
inline void TrxLogMsg::set_rec(const void* value, size_t size) {
  set_has_rec();
  rec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMLP_BRPC.TrxLogMsg.rec)
}
inline ::std::string* TrxLogMsg::mutable_rec() {
  set_has_rec();
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.TrxLogMsg.rec)
  return rec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrxLogMsg::release_rec() {
  // @@protoc_insertion_point(field_release:MMLP_BRPC.TrxLogMsg.rec)
  if (!has_rec()) {
    return NULL;
  }
  clear_has_rec();
  return rec_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrxLogMsg::set_allocated_rec(::std::string* rec) {
  if (rec != NULL) {
    set_has_rec();
  } else {
    clear_has_rec();
  }
  rec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rec);
  // @@protoc_insertion_point(field_set_allocated:MMLP_BRPC.TrxLogMsg.rec)
}

// repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
inline int TrxLogMsg::benchmsg_size() const {
  return benchmsg_.size();
}
inline void TrxLogMsg::clear_benchmsg() {
  benchmsg_.Clear();
}
inline ::MMLP_BRPC::BenchLogMsg* TrxLogMsg::mutable_benchmsg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >*
TrxLogMsg::mutable_benchmsg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.TrxLogMsg.benchmsg)
  return &benchmsg_;
}
inline const ::MMLP_BRPC::BenchLogMsg& TrxLogMsg::benchmsg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_.Get(index);
}
inline ::MMLP_BRPC::BenchLogMsg* TrxLogMsg::add_benchmsg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >&
TrxLogMsg::benchmsg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_;
}

// -------------------------------------------------------------------

// LogSendRequest

// required uint64 trxID = 1;
inline bool LogSendRequest::has_trxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSendRequest::set_has_trxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSendRequest::clear_has_trxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSendRequest::clear_trxid() {
  trxid_ = GOOGLE_ULONGLONG(0);
  clear_has_trxid();
}
inline ::google::protobuf::uint64 LogSendRequest::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.trxID)
  return trxid_;
}
inline void LogSendRequest::set_trxid(::google::protobuf::uint64 value) {
  set_has_trxid();
  trxid_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendRequest.trxID)
}

// required bool is_valid = 2;
inline bool LogSendRequest::has_is_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogSendRequest::set_has_is_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogSendRequest::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogSendRequest::clear_is_valid() {
  is_valid_ = false;
  clear_has_is_valid();
}
inline bool LogSendRequest::is_valid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.is_valid)
  return is_valid_;
}
inline void LogSendRequest::set_is_valid(bool value) {
  set_has_is_valid();
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendRequest.is_valid)
}

// repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
inline int LogSendRequest::log_msg_size() const {
  return log_msg_.size();
}
inline void LogSendRequest::clear_log_msg() {
  log_msg_.Clear();
}
inline ::MMLP_BRPC::TrxLogMsg* LogSendRequest::mutable_log_msg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
LogSendRequest::mutable_log_msg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.LogSendRequest.log_msg)
  return &log_msg_;
}
inline const ::MMLP_BRPC::TrxLogMsg& LogSendRequest::log_msg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_.Get(index);
}
inline ::MMLP_BRPC::TrxLogMsg* LogSendRequest::add_log_msg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
LogSendRequest::log_msg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_;
}

// -------------------------------------------------------------------

// LogSendResponse

// required sint32 send_reply = 1;
inline bool LogSendResponse::has_send_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogSendResponse::set_has_send_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogSendResponse::clear_has_send_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogSendResponse::clear_send_reply() {
  send_reply_ = 0;
  clear_has_send_reply();
}
inline ::google::protobuf::int32 LogSendResponse::send_reply() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendResponse.send_reply)
  return send_reply_;
}
inline void LogSendResponse::set_send_reply(::google::protobuf::int32 value) {
  set_has_send_reply();
  send_reply_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendResponse.send_reply)
}

// -------------------------------------------------------------------

// LogRequireRequest

// required uint64 trxID = 1;
inline bool LogRequireRequest::has_trxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRequireRequest::set_has_trxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRequireRequest::clear_has_trxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRequireRequest::clear_trxid() {
  trxid_ = GOOGLE_ULONGLONG(0);
  clear_has_trxid();
}
inline ::google::protobuf::uint64 LogRequireRequest::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireRequest.trxID)
  return trxid_;
}
inline void LogRequireRequest::set_trxid(::google::protobuf::uint64 value) {
  set_has_trxid();
  trxid_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireRequest.trxID)
}

// -------------------------------------------------------------------

// LogRequireResponse

// required sint32 require_reply = 1;
inline bool LogRequireResponse::has_require_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRequireResponse::set_has_require_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRequireResponse::clear_has_require_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRequireResponse::clear_require_reply() {
  require_reply_ = 0;
  clear_has_require_reply();
}
inline ::google::protobuf::int32 LogRequireResponse::require_reply() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.require_reply)
  return require_reply_;
}
inline void LogRequireResponse::set_require_reply(::google::protobuf::int32 value) {
  set_has_require_reply();
  require_reply_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.require_reply)
}

// required bool is_valid = 2;
inline bool LogRequireResponse::has_is_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRequireResponse::set_has_is_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRequireResponse::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRequireResponse::clear_is_valid() {
  is_valid_ = false;
  clear_has_is_valid();
}
inline bool LogRequireResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.is_valid)
  return is_valid_;
}
inline void LogRequireResponse::set_is_valid(bool value) {
  set_has_is_valid();
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.is_valid)
}

// repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
inline int LogRequireResponse::log_msg_size() const {
  return log_msg_.size();
}
inline void LogRequireResponse::clear_log_msg() {
  log_msg_.Clear();
}
inline ::MMLP_BRPC::TrxLogMsg* LogRequireResponse::mutable_log_msg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
LogRequireResponse::mutable_log_msg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.LogRequireResponse.log_msg)
  return &log_msg_;
}
inline const ::MMLP_BRPC::TrxLogMsg& LogRequireResponse::log_msg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_.Get(index);
}
inline ::MMLP_BRPC::TrxLogMsg* LogRequireResponse::add_log_msg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
LogRequireResponse::log_msg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_;
}

// optional uint64 trxID = 4;
inline bool LogRequireResponse::has_trxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRequireResponse::set_has_trxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRequireResponse::clear_has_trxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRequireResponse::clear_trxid() {
  trxid_ = GOOGLE_ULONGLONG(0);
  clear_has_trxid();
}
inline ::google::protobuf::uint64 LogRequireResponse::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.trxID)
  return trxid_;
}
inline void LogRequireResponse::set_trxid(::google::protobuf::uint64 value) {
  set_has_trxid();
  trxid_ = value;
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.trxID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MMLP_BRPC

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_trx_5flog_2eproto
